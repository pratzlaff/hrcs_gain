#! /usr/bin/perl -w
use strict;

=head1 NAME

addpilt - append time-dependent PILT column to an HRC-S event list which
already contains PILAB

=head1 SYNOPSIS

addpilt [options] infile outfile

=head1 DESCRIPTION

F<infile> should be an event list FITS file containing columns RAWY
and PILAB.

=head1 OPTIONS

=over 4

=item --help

Show help and exit.

=item --version

Show version and exit.

=item --colname=s

Name of the added column. The default value is PILT.

=item --tgain=s

File containing PILAB correction factors. The default value is
F<tgainHV1.out> in the directory containing the I<addpilt> program.

=item --mjd_obs=f

By default, the header MJD_OBS keyword is used as the observation
date. This option can be used to specify an alternate MJD.

=back

=head1 HISTORY

=over 4

=item October, 2017

Initial version 1.0

=back

=head1 AUTHOR

Pete Ratzlaff E<lt>pratzlaff@cfa.harvard.eduE<gt>

=head1 SEE ALSO

perl(1).

=cut

my $version = '1.0';

use Astro::FITS::CFITSIO qw(
			    CASEINSEN TDOUBLE TSTRING TINT READONLY BINARY_TBL
			   );
use PDL;
use Carp;
use FindBin;
use Getopt::Long;

my %default_opts = (
		    tgain => $FindBin::Bin . '/tgainHV1.out',
		    extname => 'events',
		    colname => 'pilt',
		   );
my %opts = %default_opts;
GetOptions(\%opts,
	   'help!', 'version!', 'debug!',
	   'extname=s', 'mjd_obs=s', 'colname=s', 'tgain=s',
	   ) or die "Try --help for more information.\n";

if ($opts{debug}) {
  $SIG{__WARN__} = \&Carp::cluck;
  $SIG{__DIE__} = \&Carp::confess;
}
$opts{help} and _help();
$opts{version} and _version();

@ARGV == 2 or die "Usage: $0 [options] infile outfile\ntry --help for more information\n";

my $mjd_obs;
$mjd_obs = $opts{mjd_obs} if $opts{mjd_obs};

@ARGV == 2 or die "invalid arguments, try --help for more information\n";

# construct HISTORY entry to be added to output file
my @argv_copy = @ARGV;
#s/\\/\\\\/g for @argv_copy;
s/'/\\'/g for @argv_copy;
my $history_entry = "$0 ". join(' ', map("'$_'", @argv_copy));

my ($infile, $outfile) = @ARGV;

my %tgain;
@tgain{qw( mjd rawy factors )} = read_tgain($opts{tgain});

# open input file
my $status = 0;
my $infptr = Astro::FITS::CFITSIO::open_file($infile, READONLY, $status);
check_status($status) or die "error opening input file '$infile'\n";

# move to the events hdu
$infptr->movnam_hdu(BINARY_TBL, $opts{extname}, 0, $status);
check_status($status) or die "could not move to '$opts{extname}' HDU in $infile\n";

my $events_hdunum;
$infptr->get_hdu_num($events_hdunum);

# seems to work on both 32 and 64 bit archs, but make sure anyway
use PDL::Core 'howbig';
die unless howbig(long) == Astro::FITS::CFITSIO::sizeof_datatype(TINT);

my %cols = (
	    rawy => { ctype => TINT, ptype => long, },
	    pilab => { ctype => TDOUBLE, ptype => double, },
	   );

for (keys %cols) {
  $cols{$_}{colnum} = undef;
  $infptr->get_colnum(CASEINSEN, $_, $cols{$_}{colnum}, $status);
  check_status($status) or die "no $_ column found in $opts{extname} HDU from $infile\n";
}

# create output file, force clobber
$outfile =~ /^!/ or $outfile = "!$outfile";
my $outfptr = Astro::FITS::CFITSIO::create_file($outfile, $status);
check_status($status) or die "error creating output file '$outfile'\n";

# copy all HDUs
$infptr->copy_file($outfptr, 1, 1, 1, $status);
check_status($status) or die "error copying input file to output file\n";

# we're all done with input file
$infptr->close_file($status);
check_status($status) or die "error closing input file\n";

$outfptr->movabs_hdu($events_hdunum, undef, $status);
check_status($status) or die "could not move to $opts{extname} HDU in $outfile\n";

if (!$mjd_obs) {
  if ($outfptr->read_key(TDOUBLE, 'mjd_obs', $mjd_obs, undef, $status)) {
    $status=0;
    $outfptr->read_key(TDOUBLE, 'mjd-obs', $mjd_obs, undef, $status) and
      die "MJD_OBS and MJD-OBS keywords not found in $infile and --mjd_obs was unspecified";
  }
}

# interpolate time-dependent correction factors to the date of this
# observation
$tgain{factors} = interpol($mjd_obs, $tgain{mjd}, $tgain{factors});

# add a HISTORY keyword
$outfptr->write_history($history_entry, $status);
check_status($status) or die "error writing HISTORY entry to $outfile\n";

# add the PILT column
my $pilt_colnum = add_column($outfptr, $opts{colname}, '1D');

my ($nrows, $nrows_at_once);
$outfptr->get_num_rows($nrows, $status);
$outfptr->get_rowsize($nrows_at_once, $status);

for (keys %cols) {
  $cols{$_}{piddle} = zeroes($cols{$_}{ptype}, $nrows_at_once);
}

if (Astro::FITS::CFITSIO->VERSION > 1.01) {
  $outfptr->perlyunpacking(0);
}
else {
  Astro::FITS::CFITSIO::PerlyUnpacking(0);
}

my $nrows_done = 0;
while ($nrows_done < $nrows) {
  my $nrows_now = ($nrows_done+$nrows_at_once <= $nrows) ?
    $nrows_at_once : $nrows-$nrows_done;

  for (keys %cols) {
    $outfptr->read_col($cols{$_}{ctype}, $cols{$_}{colnum}, $nrows_done+1, 1, $nrows_now, 0, ${$cols{$_}{piddle}->get_dataref}, undef, $status);
    $cols{$_}{piddle}->upd_data;
  }
  check_status($status) or die "error reading data\n";

  # calculate SAMP and PILAB values for these events

  my $mslice_arg = [0, $nrows_now-1];

  my ($rawy, $pilab) =
    map { $cols{$_}{piddle}->mslice($mslice_arg) } qw( rawy pilab );

  my $pilt = $pilab / interpol($rawy, $tgain{rawy}, $tgain{factors});

  $outfptr->write_col(TDOUBLE,
		      $pilt_colnum,
		      $nrows_done+1,
		      1,
		      $nrows_now,
		      $pilt->double->get_dataref,
		      $status
		     );
  check_status($status) or die "error writing $opts{colname}\n";

  $nrows_done += $nrows_now;
}

$outfptr->write_chksum($status);
check_status($status) or die "error updating checksum in $outfile\n";

$outfptr->close_file($status);
check_status($status) or die "error closing $outfile\n";

exit 0;

sub check_status {
  my $s = shift;
  if ($s != 0) {
    my $txt;
    Astro::FITS::CFITSIO::fits_get_errstatus($s,$txt);
    carp "CFITSIO error: $txt";
    return 0;
  }

  return 1;
}

sub _help {
  exec('perldoc', '-F', $FindBin::Bin . '/' . $FindBin::RealScript);
}

sub _version {
  print $version,"\n";
  exit 0;
}

sub add_column {
  my ($fptr, $name, $type) = @_;
  my $colnum;

  my $status = 0;

  if ($fptr->get_colnum(CASEINSEN, $name, $colnum, $status)) {
    $status=0;
    $outfptr->get_num_cols($colnum, $status);
    $colnum++;
    $outfptr->insert_col($colnum, $name, $type, $status);
    check_status($status) or die "error adding $name column to output file\n";
  }

  return $colnum;
}

sub read_tgain {
  my $file = shift;
  open(my $fh, '<', $file) or die "could not open '$file': $!";

  scalar(<$fh>);
  my @mjd = split ' ', <$fh>;
  my $mjd = pdl(@mjd[2..$#mjd]);

  my ($rawy, @factors) = rcols $fh;

  return $mjd, $rawy, cat(@factors)->xchg(0,1);
}
